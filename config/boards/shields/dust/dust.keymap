 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};
&sk {
    release-after-ms = <2000>;
};

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */


/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_LPAR {
            timeout-ms = <50>;
            key-positions = <0 10>;
            bindings = <&kp LPAR>;
        };

        combo_RPAR {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp RPAR>;
        };  
           
        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <1 11>;
            bindings = <&kp LBRC>;
        };
 
        combo_RBRC {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp RBRC>;
            };

        combo_LBKT {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&kp LBKT>;
            };  

        combo_RBKT {
            timeout-ms = <50>;
            key-positions = <13 23>;
            bindings = <&kp RBKT>;
            };

        combo_BSPC {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BSPC>;
            };

        combo_CUT {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LG(X)>;
            };

        combo_COPY {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(C)>;
            };

        combo_PASTE {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LG(V)>;
            };

        combo_UNDO {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp LG(Z)>;
            };

    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };      

        keymap {
                compatible = "zmk,keymap";

            //      |  q  |  w  |  e  |  r  |  t  |     |  y  |  u  |  i  |  o  |  p  |
            //      |    ESC    |     |     |     |     |     |     |     |    <-     |
            //         (     {           }     )
            //      |  a  |  s  |  d  |  f  |  g  |     |  h  |  j  |  k  |  l  |  "  |
            //      |    TAB    | ALT | CMD |     |     |     | CMD | ALT |     |  '  |
            //               [           ]
            //      |  z  |  x  |  c  |  v  |  b  |     |  n  |  m  |  ,  |  .  | SFT |
            //      | SFT |     |     |     |     |     |     |     |     |     | RET |

                    //                | SPC | SFT |     | CTL | to1 |
                    //                | MEH |     |     |     | to2 |   
                
            default_layer {
            bindings = <
            &kp Q        &kp W &kp E      &kp R      &kp T                            &kp Y &kp U      &kp I      &kp O   &kp P
            &kp A        &kp S &hm LALT D &hm LGUI F &kp G                            &kp H &hm RGUI J &hm RALT K &kp L   &mt DQT SQT
            &bt BT_CLR  &kp X &kp C      &kp V      &kp B                            &bt BT_CLR &kp M      &kp COMMA  &kp DOT &mt LSHIFT RET
                        &mt LC(LS(LALT)) SPACE &sk LSHIFT                             &sk LCTRL &mo_tog 2 1
            >;
            };

//              |  1  |  2  |  3  |  4  |  5  |         |  6  |  7  |  8  |  9  |  0  |
//              |     |     |     |     |     |         |     |     |     |     |     |

//              |  !  |  @  |  #  |  $  |  %  |         |  ^  |  &  |  *  |  +  |  :  | 
//              |     |     | ALT | CMD |     |         |     | CMD | ALT |     |     |

//              |  ~  |  "  |  £  |  <  |  >  |         |  \  |  /  |  ,  |  .  | RET |
//              |     |     |     |     |     |         |     |     |     |     | SFT |

//                                | to0 | SFT |         | CTL | to2 |
//                                |     |     |         |     |     |

            left_layer {
            bindings = <
            &kp N1    &kp N2  &kp N3         &mt LG(LS(N4)) N4 &kp N5           &kp N6        &kp N7         &kp N8               &kp N9      &kp N0
            &kp EXCL  &kp AT  &hm LALT HASH  &hm LGUI DLLR     &kp PRCNT        &kp CARET     &hm RGUI AMPS  &hm RALT KP_MULTIPLY &kp KP_PLUS &kp COLON
            &kp TILDE &kp DQT &kp LA(N3)     &kp LS(COMMA)     &kp LS(DOT)      &kp BSLH      &kp FSLH       &kp COMMA            &kp DOT     &mt RSHIFT RET
                                                &to 0  &sk LSHIFT               &sk LCTRL     &to 2
            >;
            };

//              |     |     |     |     |     |         |     |     |     |     |     |
//              |     |     |     |     |     |         |     |     |     |     |     |

//              |  #  |  ?  |     |  :  |  ;  |         |  -  |  =  |  +  |  |  |     |
//              |     |     |     |     |     |         |     |     |     |     |     |

//              | SFT |  +  |     |     |     |         |  _  | <-  | DWN | UP  |  -> |
//              |     |     |     |     |     |         |     |     |     |     |     |
 
//                                | to0 | SFT |         | CTL | mo3 |
//                                |     |     |         |     |     |
            
            right_layer {
            bindings = <
            &none  &none &none &none   &none              &none  &none  &none &none  &none  
            &kp HASH  &kp QMARK  &sk LALT  &hm LGUI COLON  &kp SEMI                  &kp LEFT &kp DOWN &kp UP  &kp RIGHT  &kp PIPE
	
            &kp LSHIFT  &kp KP_PLUS &none  &none  &none                               &kp UNDER &kp MINUS &kp EQUAL  &kp PLUS &kp RET 
                                               &to 0 &sk LSHIFT                       &kp LCTRL  &mo 3
            >;
	    };

            
//              |  F1 |  F2 |  F3 |  F4 |  F5 |         |  F6 | F7  | F8  | F9  | F10 |
//              |     |     |     |     |     |         |     |     |     |     |     |

//              |     |     |     |     |     |         |  -  |PGUP | VUP |MUTE |     |
//              |     |     | ALT | CMD |     |         |     | CMD | ALT |     |     |

//              |BTCLR|BT 1 |BT 2 |BT 3 |BT 4 |         |  _  |PGDN | VDN |     |     |
//              |     |     |     |     |     |         |     |     |     |     |     |

//                                | to0 | SFT |         |     |     |
//                                |     |     |         |     |     |   
            tri_layer {
            bindings = <
            &kp F1  &kp F2    &kp F3    &kp F4    &kp F5                     &kp F6  &kp F7   &kp F8    &kp F9  &kp F10
            &none &kp LALT &kp LGUI &none &none                     &trans &hm RGUI PG_UP  &hm RALT K_VOL_UP &kp K_MUTE &kp BSPC
            &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3                  &trans &kp PG_DN  &kp K_VOL_DN  &trans &kp RET
                                     &to 0 &kp LSHIFT                            &kp SPACE  &trans 
            >;
            };
        };

    }; 
