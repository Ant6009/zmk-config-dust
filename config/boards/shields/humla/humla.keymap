/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ALPHA       0
#define SYMBOL      1
#define NUMBER      2
#define NAVIGATION  3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <180>;
};

/ {
    behaviors {
        tdq: tap_dance_qesc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_qesc";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp ESC>;
        };

        bkt: tap_dance_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bracket";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        brc: tap_dance_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_braces";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        par: tap_dance_paren {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_paren";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            binding = <&kp LPAR>, <&kp RPAR>;
        };

        thn: tap_dance_then {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_then";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };

        skq: sticky_quick {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky_quick";
            #binding-cells = <0>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA_layer {
            bindings = <
                &tdq    &kp W   &kp E       &kp R       &kp T        &kp Y     &kp U            &kp I     &kp O    &kp P
                &kp A   &kp S   &kp D       &kp F       &kp G        &kp H     &kp J            &kp K     &kp L    &kp SQT
                &kp Z   &kp X   &kp C       &kp V       &kp B        &kp N     &kp M            &kp COMMA &kp DOT  &kp SLASH
                                &kp LCTRL   &sl 1       &skq LSHIFT   &kp SPACE &lt NUMBER BSPC  &kp RET
            >;
        };

        SYMBOL_layer {
            bindings = <
                &none         &kp LS(LC(TAB)) &kp LC(TAB) &caps_word &none          &kp TILDE &kp LBRC  &kp RBRC &kp HASH &none
                &kp LA(RIGHT) &sk LALT        &sk LCTRL   &skq LSHFT &kp PSCRN      &kp LT    &kp LPAR  &kp RPAR &kp GT   &kp BSLH
                &kp LA(LEFT)  &kp LC(W)       &kp LC(Q)   &sk LGUI   &none          &kp GRAVE &kp LBKT  &kp RBKT &kp AT   &kp PRCNT
                                              &none       &none      &none          &kp EXCL  &kp BSPC  &kp ENTER
            >;
        };

        NUMBER_layer {
            bindings = <
               &none     &kp N7 &kp N8 &kp N9  &kp STAR       &none &caps_word &kp CAPS     &none     &none
               &kp DLLR  &kp N1 &kp N2 &kp N3  &kp EQUAL      &none &skq RSHFT &sk RCTRL    &sk RALT  &none
               &kp CARET &kp N4 &kp N5 &kp N6  &kp PLUS       &none &sk RGUI   &sk LS(RGUI) &kp LC(C) &none
                                &kp DOT &kp N0 &kp QMARK      &none &none      &none
            >;
        };

        NAVIGATION_layer {
            bindings = <
                &none    &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_MUTE      &sk RALT    &kp LG(D)     &kp LS(LG(D)) &kp LG(Q)  &none
                &kp LEFT &kp DOWN     &kp UP       &kp RIGHT  &kp C_PP        &sk RA(GUI) &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP) &kp LG(RIGHT)
                &kp HOME &kp PG_DN    &kp PG_UP    &kp END    &kp C_STOP      &sk RCTRL   &kp LG(ENTER) &kp LG(O)     &kp LG(N)  &sk RA(RCTRL)
                                      &none        &none      &none           &none       &kp DEL       &sk RSHFT
            >;
        };
    };
};
